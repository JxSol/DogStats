import datetime

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.media_group import MediaGroupBuilder
from loguru import logger

from bot.keyboards.animals import (
    build_choose_animal_type,
    build_choose_sex,
    build_input_date,
    geo_button,
)
from bot.keyboards.basic import build_confirm_cancel, build_main_keyboard, build_skip_cancel, cancel_builder
from bot.logic import add_animal_record
from bot.states import AnimalAddState
from database.models import AnimalRecordCreate, AnimalType, Sex, UserRole
from settings import TZINFO

router = Router(name=__name__)


# * ================================== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ ================================== * #


@router.message(F.text == "üê∂ –î–æ–±–∞–≤–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ")
async def handle_msg_add_animal(
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.")
    await state.clear()

    await ask_for_input_catch_photo(message, state)


# * =============================== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–∏ –æ—Ç–ª–æ–≤–µ =============================== * #


async def ask_for_input_catch_photo(
    message: Message,
    state: FSMContext,
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –ø—Ä–∏ –æ—Ç–ª–æ–≤–µ."""
    await state.set_state(AnimalAddState.input_catch_photo)

    await message.answer(
        text="üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, —Å–¥–µ–ª–∞–Ω–Ω–æ–µ –ø—Ä–∏ –æ—Ç–ª–æ–≤–µ.",
        reply_markup=build_skip_cancel(
            skip_callback='input_catch_place',
        ),
    )


@router.message(AnimalAddState.input_catch_photo, F.photo)
async def handle_st_input_catch_photo(
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø—Ä–∏ –æ—Ç–ª–æ–≤–µ."""
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.")
    await state.update_data(catch_photo=message.photo[-1].file_id)

    await message.bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message.message_id - 1,
        reply_markup=None,
    )
    await ask_for_input_catch_place(message, state)


# * ==================================== –í–≤–æ–¥ –º–µ—Å—Ç–∞ –æ—Ç–ª–æ–≤–∞ ==================================== * #


async def ask_for_input_catch_place(
    message: Message,
    state: FSMContext,
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–µ—Å—Ç–æ –æ—Ç–ª–æ–≤–∞."""
    await state.set_state(AnimalAddState.input_catch_place)

    await message.answer(
        text="üó∫Ô∏è –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ª–æ–≤–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.",
        reply_markup=cancel_builder().as_markup(),
    )
    await message.answer(
        text="üìç –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
        reply_markup=geo_button(),
    )


@router.callback_query(F.data == "input_catch_place")
async def handle_cb_input_catch_place(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞ –æ—Ç–ª–æ–≤–∞."""
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à—ë–ª –∫ —ç—Ç–∞–ø—É –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞ –æ—Ç–ª–æ–≤–∞.")

    await callback.answer()
    await callback.message.delete()

    await ask_for_input_catch_place(callback.message, state)


@router.message(AnimalAddState.input_catch_place, (F.location | F.text))
async def handle_st_input_catch_place(
    message: Message,
    state: FSMContext,
    user_role: str,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞ –æ—Ç–ª–æ–≤–∞."""
    if message.location:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
        location = f"{message.location.latitude}, {message.location.longitude}"
    else:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –º–µ—Å—Ç–æ –æ—Ç–ª–æ–≤–∞.")
        location = message.text.strip()

    await state.update_data(catch_place=location)

    await message.bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message.message_id - 2,
        reply_markup=None,
    )
    await message.bot.delete_message(
        chat_id=message.chat.id,
        message_id=message.message_id - 1,
    )

    await message.answer(
        text="üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
        reply_markup=build_main_keyboard(UserRole(user_role)),
    )

    await ask_for_input_catch_date(message, state)


# * ==================================== –í–≤–æ–¥ –¥–∞—Ç—ã –æ—Ç–ª–æ–≤–∞ ==================================== * #


async def ask_for_input_catch_date(
    message: Message,
    state: FSMContext,
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –æ—Ç–ª–æ–≤–∞."""
    current_date = datetime.datetime.now(TZINFO).strftime("%Y-%m-%d %H:%M")

    await state.set_state(AnimalAddState.input_catch_date)
    await state.update_data(catch_date=current_date)

    await message.answer(
        text="üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ª–æ–≤–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î —á—á:–º–º",
        reply_markup=build_input_date(current_date),
    )


@router.callback_query(AnimalAddState.input_catch_date, F.data == "input_current_date")
async def handle_cb_input_current_date(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã."""
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É.")

    await callback.answer()
    await callback.message.edit_reply_markup(
        reply_markup=None,
    )

    await ask_for_input_animal_type(callback.message, state)


@router.message(
    AnimalAddState.input_catch_date,
    F.text.regexp(r"\d{4}-\d{2}-\d{1,2} \d{1,2}:\d{2}"),
)
async def handle_st_input_catch_date(
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ—Ç–ª–æ–≤–∞."""
    catch_date = message.text
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –¥–∞—Ç—É –æ—Ç–ª–æ–≤–∞ {catch_date}.")
    await state.update_data(catch_date=catch_date)

    await message.bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message.message_id - 1,
        reply_markup=None,
    )

    await ask_for_input_animal_type(message, state)


# * ================================== –í—ã–±–æ—Ä –≤–∏–¥–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ ================================== * #


async def ask_for_input_animal_type(
    message: Message,
    state: FSMContext,
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–∏–¥–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    await state.set_state(AnimalAddState.input_animal_type)

    await message.answer(
        text="‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.",
        reply_markup=build_choose_animal_type(),
    )


@router.callback_query(F.data == "input_animal_type")
async def handle_cb_input_animal_type(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à—ë–ª –∫ —ç—Ç–∞–ø—É –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.")

    await callback.answer()
    await callback.message.delete()

    await ask_for_input_animal_type(callback.message, state)


@router.callback_query(AnimalAddState.input_animal_type, F.data.startswith("animal_type_"))
async def handle_cb_animal_type(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    animal_type = callback.data.split("_")[2]
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø {animal_type}.")
    await state.update_data(animal_type=AnimalType[animal_type].value)

    await callback.message.edit_reply_markup(
        reply_markup=build_choose_animal_type(AnimalType[animal_type]),
    )

    await ask_for_input_breed(callback.message, state)


# * ================================= –í–≤–æ–¥ –ø–æ—Ä–æ–¥—ã –∂–∏–≤–æ—Ç–Ω–æ–≥–æ ================================= * #


async def ask_for_input_breed(
    message: Message,
    state: FSMContext,
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–∏–ø–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    await state.set_state(AnimalAddState.input_breed)

    await message.answer(
        text="üê© –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –ø–æ—Ä–æ–¥—É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.",
        reply_markup=cancel_builder().as_markup(),
    )


@router.message(AnimalAddState.input_breed, F.text)
async def handle_st_input_breed(
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–¥—ã –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    breed = message.text.strip()
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –ø–æ—Ä–æ–¥—É {breed}.")
    await state.update_data(breed=breed)

    await message.bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message.message_id - 1,
        reply_markup=None,
    )

    await ask_for_input_color(message, state)


# * ================================= –í–≤–æ–¥ —Ü–≤–µ—Ç–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ ================================= * #


async def ask_for_input_color(
    message: Message,
    state: FSMContext,
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–∏–ø–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    await state.set_state(AnimalAddState.input_color)

    await message.answer(
        text="üé® –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –æ–∫—Ä–∞—Å –µ–≥–æ —à–µ—Ä—Å—Ç–∏.",
        reply_markup=cancel_builder().as_markup(),
    )


@router.message(AnimalAddState.input_color, F.text)
async def handle_st_input_color(
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–≤–µ—Ç–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    color = message.text.strip()
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ü–≤–µ—Ç {color}.")
    await state.update_data(color=color)

    await message.bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message.message_id - 1,
        reply_markup=None,
    )

    await ask_for_input_sex(message, state)


# * ================================= –í—ã–±–æ—Ä –ø–æ–ª–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ ================================= * #


async def ask_for_input_sex(
    message: Message,
    state: FSMContext,
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    await state.set_state(AnimalAddState.input_sex)

    await message.answer(
        text="‚ößÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.",
        reply_markup=build_choose_sex(),
    )


@router.callback_query(AnimalAddState.input_sex, F.data.startswith("sex_"))
async def handle_cb_sex(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    sex = callback.data.split("_")[1]
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª {sex}.")
    await state.update_data(sex=Sex[sex].value)

    await callback.message.edit_reply_markup(
        reply_markup=build_choose_sex(Sex[sex]),
    )

    await ask_for_input_features(callback.message, state)


# * =============================== –í–≤–æ–¥ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∂–∏–≤–æ—Ç–Ω–æ–≥–æ =============================== * #


async def ask_for_input_features(
    message: Message,
    state: FSMContext,
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    await state.set_state(AnimalAddState.input_features)

    await message.answer(
        text="ü¶ö –í–≤–µ–¥–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.",
        reply_markup=build_skip_cancel(
            skip_callback='input_transfer_photo',
        ),
    )


@router.message(AnimalAddState.input_features, F.text)
async def handle_st_input_features(
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    features = message.text.strip()
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.")
    await state.update_data(features=features)

    await message.bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message.message_id - 1,
        reply_markup=None,
    )

    await ask_for_input_transfer_photo(message, state)


# * ================================ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–∏—é—Ç–∞ ================================ * #


async def ask_for_input_transfer_photo(
    message: Message,
    state: FSMContext,
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–∏—é—Ç–∞."""
    await state.set_state(AnimalAddState.input_transfer_photo)

    await message.answer(
        text="üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, —Å–¥–µ–ª–∞–Ω–Ω–æ–µ –≤ –ø—Ä–∏—é—Ç–µ.",
        reply_markup=build_skip_cancel(
            skip_callback='input_transfer_date',
        ),
    )


@router.callback_query(F.data == 'input_transfer_photo')
async def handle_cb_input_transfer_photo(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–∏—é—Ç–∞."""
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à—ë–ª –∫ —ç—Ç–∞–ø—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–∏—é—Ç–∞.")

    await callback.answer()
    await callback.message.delete()

    await ask_for_input_transfer_photo(callback.message, state)


@router.message(AnimalAddState.input_transfer_photo, F.photo)
async def handle_st_input_transfer_photo(
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–∑ –ø—Ä–∏—é—Ç–∞."""
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.")
    await state.update_data(transfer_photo=message.photo[-1].file_id)

    await message.bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message.message_id - 1,
        reply_markup=None,
    )
    await ask_for_input_transfer_date(message, state)


# * ========================= –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –ø—Ä–∏—é—Ç ========================= * #


async def ask_for_input_transfer_date(
    message: Message,
    state: FSMContext,
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –ø—Ä–∏—é—Ç."""
    current_date = datetime.datetime.now(TZINFO).strftime("%Y-%m-%d %H:%M")

    await state.set_state(AnimalAddState.input_transfer_date)
    await state.update_data(transfer_date=current_date)

    await message.answer(
        text="üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –ø—Ä–∏—é—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î —á—á:–º–º",
        reply_markup=build_input_date(current_date, skip_callback='input_comment'),
    )


@router.callback_query(F.data == "input_transfer_date")
async def handle_cb_input_transfer_date(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –ø—Ä–∏—é—Ç."""
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à—ë–ª –∫ —ç—Ç–∞–ø—É –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –ø—Ä–∏—é—Ç.")

    await callback.answer()
    await callback.message.delete()

    await ask_for_input_transfer_date(callback.message, state)


@router.callback_query(AnimalAddState.input_transfer_date, F.data == "input_current_date")
async def handle_st_input_transfer_date_cb_input_current_date(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã."""
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É.")

    await callback.answer()
    await callback.message.edit_reply_markup(
        reply_markup=None,
    )

    await ask_for_input_comment(callback.message, state)


@router.message(
    AnimalAddState.input_transfer_date,
    F.text.regexp(r"\d{4}-\d{2}-\d{1,2} \d{1,2}:\d{2}"),
)
async def handle_st_input_transfer_date(
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –ø—Ä–∏—é—Ç."""
    catch_date = message.text
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –¥–∞—Ç—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ {catch_date}.")
    await state.update_data(catch_date=catch_date)

    await message.bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message.message_id - 1,
        reply_markup=None,
    )

    await ask_for_input_comment(message, state)


# * ================================= –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ================================= * #


async def ask_for_input_comment(
    message: Message,
    state: FSMContext,
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
    await state.set_state(AnimalAddState.input_comment)

    await message.answer(
        text="üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.",
        reply_markup=build_skip_cancel(
            skip_callback='confirmation',
        ),
    )


@router.callback_query(F.data == "input_comment")
async def handle_cb_input_comment(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à—ë–ª –∫ —ç—Ç–∞–ø—É –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")

    await callback.answer()
    await callback.message.delete()

    await ask_for_input_comment(callback.message, state)


@router.message(AnimalAddState.input_comment, F.text)
async def handle_st_input_comment(
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
    comment = message.text.strip()
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
    await state.update_data(comment=comment)

    await message.bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message.message_id - 1,
        reply_markup=None,
    )

    await ask_for_confirmation(message, state)


# * ================================== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ ================================== * #


async def ask_for_confirmation(
    message: Message,
    state: FSMContext,
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    await state.set_state(AnimalAddState.confirm)
    data = await state.get_data()
    data['created_by'] = message.from_user.id
    animal = AnimalRecordCreate(**data)

    text_list = []
    filled_fields = animal.model_dump(
        exclude_none=True,
        exclude={
            'catch_photo',
            'transfer_photo',
            'medical_photo',
            'created_at',
            'updated_at',
            'created_by',
        },
    )

    for field_name, value in filled_fields.items():
        title = AnimalRecordCreate.model_fields[field_name].title
        text_list.append(f"<b>{title}</b>: <code>{value}</code>")

    photos = MediaGroupBuilder()

    if animal.catch_photo:
        photos.add_photo(
            media=animal.catch_photo,
        )

    if animal.transfer_photo:
        photos.add_photo(
            media=animal.transfer_photo,
        )

    if animal.medical_photo:
        photos.add_photo(
            media=animal.medical_photo,
        )

    if animal.catch_photo or animal.transfer_photo or animal.medical_photo:
        await message.answer_media_group(
            media=photos.build(),
        )

    await message.answer(
        text=f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n{'\n'.join(text_list)}",
        reply_markup=build_confirm_cancel(),
        parse_mode="HTML",
    )


@router.callback_query(F.data == "confirmation")
async def handle_cb_confirmation(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à—ë–ª –∫ —ç—Ç–∞–ø—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await callback.answer()
    await callback.message.delete()

    logger.debug(f"!!!!!!!!!!!!!!!!!!!!!!!!{callback.message}")
    await ask_for_confirmation(callback.message, state)


@router.callback_query(AnimalAddState.confirm, F.data == "confirm")
async def handle_cb_confirm(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ."""
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.")

    data = await state.get_data()
    data['created_by'] = callback.from_user.id
    animal = AnimalRecordCreate(**data)

    record = await add_animal_record(animal)

    await callback.answer()
    await callback.message.answer(
        text=f"‚úÖ –ñ–∏–≤–æ—Ç–Ω–æ–µ {record.animal_type} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."
    )
